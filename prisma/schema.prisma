// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Team {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  firstYearOnly       Boolean  @default(false)
  password            String
  acceptRules         Boolean  @default(false)
  acceptDataTreatment Boolean  @default(false)

  members     TeamMember[]
  submissions Submission[]

  // Fields use for resetting password
  resetPasswordToken        String?
  resetPasswordConsentToken String?

  evaluationsA          Evaluation[]           @relation("evaluationA")
  evaluationsB          Evaluation[]           @relation("evaluationB")
  assignedEvaluations   Evaluation[]           @relation("assignedEvaluation")
  controlPairCandidateA ControlPairCandidate[] @relation("controlPairCandidateA")
  controlPairCandidateB ControlPairCandidate[] @relation("controlPairCandidateB")
  ControlPairA          ControlPair[]          @relation("controlPairA")
  ControlPairB          ControlPair[]          @relation("controlPairB")

  hasValidSubmission Boolean @default(false)
  isTop3             Boolean @default(false)
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  email       String   @unique
  isStudent   Boolean  @default(true)
  university  String?
  yearOfStudy String?
  companyName String?
  companyRole String?

  // Fields used for email validation
  emailValidated       DateTime?
  emailValidationToken String?

  // Field use for resetting password
  isResetPasswordAuthor Boolean @default(false)

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  assignedEvaluations Evaluation[]

}

model Submission {
  id          Int      @id @default(autoincrement())
  submittedAt DateTime @default(now())
  fileName    String

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int
}

model Jury {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  password  String @default("")

  resetPasswordToken String?

  assignedEvaluations Evaluation[]
}

model Evaluation {
  id     Int              @id @default(autoincrement())
  name   String
  status EvaluationStatus @default(PENDING)

  // Evaluation information
  teamA   Team @relation("evaluationA", fields: [idTeamA], references: [id])
  idTeamA Int
  teamB   Team @relation("evaluationB", fields: [idTeamB], references: [id])
  idTeamB Int

  // Who should do the evaluation?
  assignedTeam         Team?       @relation("assignedEvaluation", fields: [assignedTeamId], references: [id])
  assignedTeamId       Int?
  assignedTeamMember   TeamMember? @relation(fields: [assignedTeamMemberId], references: [id])
  assignedTeamMemberId Int?
  assignedJury         Jury?       @relation(fields: [assignedJuryId], references: [id])
  assignedJuryId       Int?

  // Evaluation criteria
  evaluationCriteria EvaluationCriteria
  criteria0          Boolean? // False = teamA, true = teamB
  criteria1          Boolean? // False = teamA, true = teamB
  criteria2          Boolean? // False = teamA, true = teamB

  // Avoid double-booking problem
  version Int
}

model ControlPairCandidate {
  id   Int    @id @default(autoincrement())
  name String

  teamA   Team @relation("controlPairCandidateA", fields: [idTeamA], references: [id])
  idTeamA Int
  teamB   Team @relation("controlPairCandidateB", fields: [idTeamB], references: [id])
  idTeamB Int

  evaluationCriteria EvaluationCriteria
  nicolasChoice      Boolean? // False = teamA, true = teamB
  julesChoice        Boolean? // False = teamA, true = teamB

  version Int

  nicolasGoodCandidate Boolean
  julesGoodCandidate   Boolean
}

model ControlPair {
  id   Int    @id @default(autoincrement())
  name String

  teamA   Team @relation("controlPairA", fields: [idTeamA], references: [id])
  idTeamA Int
  teamB   Team @relation("controlPairB", fields: [idTeamB], references: [id])
  idTeamB Int

  evaluationCriteria EvaluationCriteria
  criteria           Boolean
}

enum EvaluationCriteria {
  CRITERIA_0
  CRITERIA_1
  CRITERIA_2
  ALL
}

enum EvaluationStatus {
  PENDING
  DONE
}
